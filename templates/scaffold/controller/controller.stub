<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$\Admin\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Admin\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\Admin\$MODEL_NAME$Repository;
use Illuminate\Http\Request;
use Breadcrumbs, Toastr, Response;
use Prettus\Repository\Criteria\RequestCriteria;

class $MODEL_NAME$Controller extends BaseController
{
    /** @var  $MODEL_NAME$Repository */
    private $$MODEL_NAME_CAMEL$Repository;

    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repo)
    {
        parent::__construct();
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repo;

        Breadcrumbs::register('admin-$MODEL_NAME_PLURAL_CAMEL$', function ($breadcrumbs) {
            $breadcrumbs->parent('控制台');
            $breadcrumbs->push('[$MODEL_NAME$]管理', route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        });
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request
     * @return Response
     */
    public function index(Request $request)
    {
        Breadcrumbs::register('admin-$MODEL_NAME_PLURAL_CAMEL$-index', function ($breadcrumbs) {
            $breadcrumbs->parent('admin-$MODEL_NAME_PLURAL_CAMEL$');
            $breadcrumbs->push('[$MODEL_NAME$]列表', route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        });

        $this->$MODEL_NAME_CAMEL$Repository->pushCriteria(new RequestCriteria($request));
        $$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->$RENDER_TYPE$;

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index')
            ->with('$MODEL_NAME_PLURAL_CAMEL$', $$MODEL_NAME_PLURAL_CAMEL$);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        Breadcrumbs::register('admin-$MODEL_NAME_PLURAL_CAMEL$-create', function ($breadcrumbs) {
            $breadcrumbs->parent('admin-$MODEL_NAME_PLURAL_CAMEL$');
            $breadcrumbs->push('新建[$MODEL_NAME$]', route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.create'));
        });
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.create');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

        Toastr::success('[$MODEL_NAME$]保存成功.');

        return redirect(route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME$ not found');

            return redirect(route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
        Breadcrumbs::register('admin-$MODEL_NAME_PLURAL_CAMEL$-edit', function ($breadcrumbs) {
            $breadcrumbs->parent('admin-$MODEL_NAME_PLURAL_CAMEL$');
            $breadcrumbs->push('编辑[$MODEL_NAME$]', route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.edit', ['id' => $id]));
        });

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Toastr::error('$MODEL_NAME$ not found');

            return redirect(route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Toastr::error('[$MODEL_NAME$]不存在');

            return redirect(route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        Toastr::success('[$MODEL_NAME$]更新成功.');

        return redirect(route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Toastr::error('$MODEL_NAME$ not found');

            return redirect(route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $this->$MODEL_NAME_CAMEL$Repository->delete($id);

        Toastr::success('$MODEL_NAME$删除成功.');

        return redirect(route('$VIEW_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

     /**
     * Delete multi users
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function destroyAll(Request $request)
    {
        if(!($ids = $request->get('ids', []))) {
            return response()->json(['status' => 0, 'msg' => '请求参数错误']);
        }

        foreach($ids as $id){
            $result = $this->$MODEL_NAME_CAMEL$Repository->delete($id);
        }
        return response()->json($result ? ['status' => 1] : ['status' => 0]);
    }
}
